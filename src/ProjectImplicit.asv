%Housekeeping
clc 
clear 

% Domain Initialization
% Domain: -pi<X<pi   -pi<y<pi
Ax = -pi;
Ay = -pi;
Bx = pi;
By = pi;

% Starting by Discretizing FEB 5th PAGE 2 BOT
% L: number of points, h: interval, N: number of points
Lx = Bx-Ax
Ly = By-Ay
Nx = 7;
Ny = 7;
hx = Lx/(Nx-1)
hy = Ly/(Ny-1)
ht = 1


%Discretly 

x = Ax:hx:Bx
y = Ay:hy:By




%Fuck Yeah Boundary Conditions
% LB: Left Boundary
GLB = ((Bx-Ax)^2)*cos(((pi*Ax)/Bx))
FLB = Ax*((Bx-Ax)^2)
ULB = GLB + ((y-Ay)./(By-Ay)).*(FLB-GLB)

% RB
URB = 0;

% TB: Top Boundary
FTB = x.*((Bx-x).^2)
UTB = FTB

% BB: Bottom Boundary
GBB = ((Bx-x).^2).*cos(((pi.*x)./Bx));
UBB = GBB;
ULBT = ULB'


Nt=300
%Let make a big ass matrix
 U = [UTB ;ULBT(2:Ny-1), zeros(Ny-2,Nx-1); UBB]
 
 
% Implicit Method

Nxy= Nx*Ny
ht = .01
D = .1


% Lambx = (D*ht)/(hx^2)
% Lamby = (D*ht)/(hy^2)
% 
% 
% %Matrix of Coefficeints 
% A = zeros(Nxy,Nxy);
% for i = 2:Nxy
%     for j = 2:Nxy-1
%        A(i,i) = -Lamby;
%        A(i,i+(Ny-1)) = -Lambx;
%        A(i,i+Ny) = 2*Lambx+2*Lamby+1;
%        A(i,i+(Ny+1)) = -Lambx;
%        A(i,i+2*Ny) = -Lamby ;
%     end
% end
% 
% A=A(1:Nxy,1:Nxy);




ULBs = ULB(2:Nx-1)
UTBs = UTB(2:Nx-1)
UBBs = UBB(2:Nx-1)



%%
%B.C vector
bc=zeros(Nx-2,Ny-2);
bc(1,:)=ULBs/hx^2;
% bc(Nx-2,:)=UE/hx^2;  %Dirichlet B.Cs
bc(:,1)=UBBs/hy^2; 
bc(:,Ny-2)=UTBs/hy^2;  %Dirichlet B.Cs

%bc(1,:)=-UnW/dx;
bc(Nx-2,:)=URB/hx;  %Neumann B.Cs
%bc(:,1)=-UnS/dy; 
% bc(:,nx-2)=UnN/dy;  %Neumann B.Cs




bc=D*ht*bc;






%Calculating the coefficient matrix for the implicit scheme
Ex=sparse(2:Nx-2,1:Nx-3,1,Nx-2,Nx-2);
Ax=Ex+Ex'-2*speye(Nx-2);        %Dirichlet B.Cs
%Ax(1,1)=-1; Ax(nx-2,nx-2)=-1;  %Neumann B.Cs
Ey=sparse(2:Ny-2,1:Ny-3,1,Nxy,Ny);
Az=Ey+Ey'-2*speye(Ny-2);        %Dirichlet B.Cs
%Ay(1,1)=-1; Ay(ny-2,ny-2)=-1;  %Neumann B.Cs
A=kron(Az/hy^2,speye(Nx-2))+kron(speye(Ny-2),Ax/hx^2);
C=speye((Nx-2)*(Ny-2))-D*ht*A;










%Initial U
UNEW = zeros(Ny,Nx)




for k = 1:Nt
    

            
   p = reshape(U,[Nxy,1])
   
   q = C\p
   
   UNEW = reshape(q,[Ny,Nx])
   
   UNEW(1,:) = UTB;
   UNEW(Ny,:) = UBB;
   UNEW(:,1) = ULB;
   UNEW(Nx,:) = UNEW(Nx-1,:)


    
    
            h= surf(x,y,UNEW)
        set(h,'edgecolor','none')
            drawnow;
            refreshdata(h)
            U = UNEW
    end


%Pentagonal Matrix Made now I just need to input B.C. and solve






























% v=0
% 
% UnE = zeros(Ny,Nx,Nt)
% UnE(:,:,1) = U
% 
% 
% v=1
% Nt=12
% UnI = zeros(Ny,Nx,Nt)
% UnI(:,:,1) = U
% UnI(:,:,2) = U
% 
% for k = 0:ht:10
%    v=v+1 
% for i = 2:Ny-1
%     for j = 2:Nx
%         if j == Nx
%          UnI(i,j,v) = (UnI(i+1,j,v)-2*UnI(i,j,v)+UnI(i-1,j,v))*((ht*D)/(hx^2)) + (-2*UnI(i,j,v)+2*UnI(i,j-1,v))*((ht*D)/(hy^2))+ UnI(i,j,v-1);    
%         else
%         UnI(i,j,v) = (UnI(i+1,j,v)-2*UnI(i,j,v)+UnI(i-1,j,v))*((ht*D)/(hx^2)) + (UnI(i,j+1,v)-2*UnI(i,j,v)+UnI(i,j-1,v))*((ht*D)/(hy^2))+ UnI(i,j,v-1);
%         end
%     end
% end
% %Adding BC
% % Un(:,:,v+1) = [Un, zeros(Ny-1,1);zeros(1,Nx)]
% UnE(1,1:Nx,v+1) = UTB;
% UnE(Ny,1:Nx,v+1) = UBB;
% 
% UnE(:,1,v+1) = ULB;
% % UnE(:,Nx+1,v+1) = UnE(:,Nx-1,v+1)
% 
% 
% end
%  
% UnE
